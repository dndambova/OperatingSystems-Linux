04-a-5000.
Намерете командите на 10-те най-стари процеси в системата.
(1)
ps -e -o etimes -o comm | sort -n -k 1 | tail -n 10 | cut -f 2 -d " "
(2)
ps -e -o cmd = --sort=start_time | head -n 10

04-a-6000.
Намерете PID и командата на процеса, който заема най-много виртуална памет в системата.

ps -eo cmd= -o pid= -o vsz --sort=vsz | tail -n 1

04-a-6300.
Изведете командата на най-стария процес.

ps -eo cmd= --sort=start_time | head -n 1

04-b-5000.
Намерете колко физическа памет заемат всички процеси на потребителската група root.

ps -g root -o rsz= | awk 'BEGIN {sum=0}{sum += $1} END {print sum}'

04-b-6100.
Изведете имената на потребителите, които имат поне 2 процеса, чиято команда е vim 
(независимо какви са аргументите й).
(1)
ps -o user= -o cmd= -C vim| sort -k 1 | uniq -c | awk '{if ($1>=2) print $2}'
(2)
ps -o user= -o cmd= |grep vim | grep -v grep | sort -k 1 | uniq -c | awk '{if ($1>=2) print $2}'

04-b-6200.
Изведете имената на потребителите, които не са логнати в момента, но имат живи процеси.

grep -vf <(who | cut -f 1 -d " " | sort | uniq ) <(ps -eo user) | sort | uniq

04-b-7000.
Намерете колко физическа памет заемат осреднено всички процеси на потребителската група root.
Внимавайте, когато групата няма нито един процес.

ps -g root -o rsz= | sort -n | uniq -c | awk 'BEGIN{average =0; sum=0}{if($2!=0) {sum += ($1 * $2); average += $1 } else {sum += 0; average +=$1}}END{print sum/average}'

04-b-8000.
Намерете всички PID и техните команди (без аргументите), които нямат tty, което ги управлява. 
Изведете списък само с командите без повторения.
ps -eo comm= -o tty= -o pid= | fgrep "?" | grep -v grep | sort -k 1 -t " " |sed s/""?//g | awk -F "   " '{print $1}' | uniq

04-b-9000.
Да се отпечатат PID на всички процеси, които имат повече деца от родителския си процес.

SCRIPTS





